#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>

#define MAX_LINE 1000
#define MAX_TOKEN 100

int main() {
    char line[MAX_LINE];
    char *tok[MAX_TOKEN];
    int pid;

    // Reads stdin by line

    while(1) {
        printf("Shell > ");
        fflush(stdout);

        if(fgets(line, MAX_LINE, stdin) == NULL) {
            break;  
        }

        line[strcspn(line, "\n")] = '\0';

        if (line[0] == '\0') {  
            continue;
        }

        // Parse input into tokens

        int tok_count = 0;
        char *token = strtok(line, " ");

        while (token != NULL && tok_count < MAX_TOKEN) {
            tok[tok_count++] = token;
            token = strtok(NULL, " ");
        }

        tok[tok_count] = NULL;

        // Fork

        pid = fork();

        if (pid < 0) {
            perror("Failed to Fork");
            exit(1);

        } else if (pid == 0) {  
            
            // Child process
            
            if (execvp(tok[0], tok) == -1) {
                perror("Failed to Exec");
                exit(1);
            }

        } else {  
            
            // Parent process


            int status;
            if (waitpid(pid, &status, 0) == -1) {
                perror("Failed to Wait");
            }
        }
    }

    return 0; 
}
